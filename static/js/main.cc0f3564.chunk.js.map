{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","then","res","json","result","message","className","map","item","name","Object","entries","song","videoCode","includes","split","title","width","src","frameBorder","allow","allowFullScreen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"wQA2DeA,MAxDf,WAAgB,IAAD,EACeC,mBAAS,MADxB,mBACJC,EADI,KACGC,EADH,OAEqBF,oBAAS,GAF9B,mBAEJG,EAFI,KAEMC,EAFN,OAGeJ,mBAAS,IAHxB,mBAGJK,EAHI,KAGGC,EAHH,KAoBX,OAfAC,qBAAU,WACNC,MAAM,sEACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACGR,GAAY,GACZE,EAASM,MAEb,SAACX,GACGG,GAAY,GACZF,EAASD,QAGtB,IAECA,EACO,uCAAaA,EAAMY,SAClBV,EAIJ,yBAAKW,UAAU,mBACVT,EAAMU,KAAI,SAAAC,GAAI,OACX,yBAAKF,UAAU,qBACX,wBAAIA,UAAU,UAAUE,EAAKC,MAC5BC,OAAOC,QAAQH,GAAMD,KAAI,SAAAK,GAClB,GAAIA,EAAK,IAAkB,SAAZA,EAAK,GAAe,CAC/B,IAAMC,EAAYD,EAAK,GAAGE,SAAS,YAAcF,EAAK,GAAGG,MAAM,YAAY,GAAKH,EAAK,GAAGG,MAAM,QAAQ,GACtG,OACI,yBAAKT,UAAU,oCACX,2BAAIM,EAAK,IACT,4BACII,MAAOJ,EAAK,GACZK,MAAM,OACNC,IAAG,wCAAmCL,GACtCM,YAAY,IACZC,MAAM,0EACNC,iBAAe,cAnBhD,yBAAKf,UAAU,sBAAqB,8CCd/BgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAMY,c","file":"static/js/main.cc0f3564.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n\n    useEffect(() => {\n        fetch('https://sheet.best/api/sheets/366a23c6-27c5-475a-af4e-2c5aed4c8ec9')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setItems(result);\n                },\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, []);\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div className=\"ucitajMajkuTiJebem\"><span>Loading...</span></div>;\n    } else {\n        return (\n            <div className=\"container-fluid\">\n                {items.map(item =>\n                    <div className=\"row nazovimoOsoba\">\n                        <h2 className=\"col-12\">{item.name}</h2>\n                        {Object.entries(item).map(song => {\n                                if (song[1] && song[0] !== 'name') {\n                                    const videoCode = song[1].includes('watch?v=') ? song[1].split('watch?v=')[1] : song[1].split('.be/')[1];\n                                    return (\n                                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-6\">\n                                            <p>{song[0]}</p>\n                                            <iframe\n                                                title={song[1]}\n                                                width=\"100%\"\n                                                src={`https://www.youtube.com/embed/${videoCode}`}\n                                                frameBorder=\"0\"\n                                                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                                                allowFullScreen\n                                            />\n                                        </div>\n                                    )\n                                }\n                            }\n                        )}\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}